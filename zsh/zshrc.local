#!/bin/zsh

# defining word endings
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

# ENHANCD customizations
export ENHANCD_COMMAND=d
# export ENHANCD_FILTER=fzf-tmux:fzf:percol

# FZF customizations
export FZF_DEFAULT_COMMAND='ag --hidden --path-to-ignore=~/.agignore -g ""'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="find . -path '*/.git' -prune -o -type d -print"

# autojump
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh

# eval "$(thefuck --alias)"
# Ag (the silver searcher)
alias ag='ag --hidden --path-to-ignore=~/.agignore'

# # alias for frequent commands
alias ed='open -t'
alias em='emacs -nw'
alias q='exit'
alias w='echo -e "$Blue $PWD ${Red}at ${Cyan}$(whoami)${Red}@${Yellow}$(hostname -s)$Red in $Yellow$0$Purple \$"'
alias s='du -sm * | sort -nr | head -n 20'
alias v='mvim -v'
alias vi='mvim -v -u NONE -N'
alias vim='mvim -v'
alias vie='mvim -v -u ~/essential.vim -N'
alias k='k -h'
alias tarc='tar -zcvf file.tar.gz'
alias tarx='tar -zxvf'
alias finder='ranger'
alias t='tmux'
alias tx='tmuxinator'
alias pc='proxychains4'
alias iDevice='instruments -s devices'
alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"

pless() { pygmentize -O style=lovelace -f console256 -g $* | less -R }
pcat() { pygmentize -O style=perldoc -f console256 -g }
mod-view(){ stat -f "%OLp" $1 }
# # working with pushd and popd
# alias di='dirs -v | head -n 10'
# alias dic='dirs -c'
# alias po='popd'
alias ptpy='python -m ptpython'
alias ptpy2='python2 -m ptpython'
alias ptpy3='python3 -m ptpython'
alias ipy='ipython'
alias sha='shasum'
# alias dgserver='python manage.py runserver_plus'
# alias dgshell='python manage.py shell_plus'
alias jdk8='export JAVA_HOME="`/usr/libexec/java_home -v 1.8`"'
alias jdk7='export JAVA_HOME="`/usr/libexec/java_home -v 1.7`"'
alias perms='stat -f "%A %N" *'
# 在命令行直接输入 python 文件，会用 vim 中打开，以下类似
# alias -s py=vim
alias -s js=vim
alias -s c=vim
alias -s java=vim
alias -s txt=vim
alias ghopen='hub browse'
alias aly_user='ssh fugees@hemuapp.me -p 2202 -i $HOME/.ssh/aly_rsa'
alias aly_root='ssh root@hemuapp.me -p 2202 -i $HOME/.ssh/aly_rsa'
alias txy_root='ssh root@119.27.165.107 -p 22 -i $HOME/.ssh/txy_rsa'
alias jx_root='ssh root@dev.jxcloud.com -p 22 -i $HOME/.ssh/aly_rsa'
alias gc_server='ssh -o UserKnownHostsFile=/dev/null -o CheckHostIP=no -o StrictHostKeyChecking=no -i $HOME/.ssh/gcloud_rsa -A -p 22 gatspy.if@104.199.179.106'
alias jsc='/System/Library/Frameworks/JavaScriptCore.framework/Versions/Current/Resources/jsc'

# alias osx systemImages
alias app_from_store="find /Applications -path '*Contents/_MASReceipt/receipt' -maxdepth 4 -print |\sed 's#.app/Contents/_MASReceipt/receipt#.app#g; s#/Applications/##'"
alias repair_permissons='sudo diskutil repairPermissions /'
alias disk_view_all='diskutil list'
# Supported formats are plain text, rich text (rtf) and Microsoft Word (doc/docx).
alias export_html='textutil -convert html file.ext'
alias finder_show='defaults write com.apple.finder AppleShowAllFiles true'
alias finder_hide='defaults write com.apple.finder AppleShowAllFiles false'
alias menubar_show='defaults write NSGlobalDomain _HIHideMenuBar -bool false'
alias menubar_hide='defaults write NSGlobalDomain _HIHideMenuBar -bool true'
alias dns-clean='sudo dscacheutil -flushcache && sudo killall -HUP mDNSResponder'
alias del-dsstore="find . -type f -name '*.DS_Store' -ls -delete"
alias ping-short='ping -o $@'
alias pwdcp='pwd -P | tr -d "\r\n" | pbcopy'
alias bo='bower'
alias bof="yes '' | bower init"
alias you-get-pc="proxychains4 -q you-get"

# ls, with chmod-like permissions and more.
# @param $1 The directory to ls
function lls {
  LLS_PATH=$1
  ls -aHl $LLS_PATH | awk "{k=0;for(i=0;i<=8;i++)k+=((substr(\$1,i+2,1)~/[rwx]/) \
                            *2^(8-i));if(k)printf(\"%0o \",k);print}"
}

export SBT_OPTS="-Xms512M -Xmx1536M -Xss1M -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M -Duser.timezone=GMT"
# config QT
# export QT_HOME=${HOME}/Home/App/Qt5/5.6/clang_64
# export QT_QPA_PLATFORM_PLUGIN_PATH=/Users/Gatspy/Home/App/Qt5/5.6/clang_64/plugins/platforms
# export QT_PLUGIN_PATH=/Users/Gatspy/Home/App/Qt5/5.6/clang_64/plugins
# export PATH="$PATH:$QT_HOME/bin"

# config Android
export ANDROID_HOME=${HOME}/App/android/sdk
export PATH="$PATH:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin"

export NDK_ROOT="${HOME}/App/android/sdk/ndk-bundle"
export PATH="$PATH:$NDK_ROOT"

# java
export JAVA_HOME=$(/usr/libexec/java_home)
export GRADLE_HOME=/usr/local/opt/gradle/libexec

# browsermob
export BROWSERMOB=/Users/gatspy/App/tools/browsermob-proxy
export PATH="$PATH:$BROWSERMOB/bin"

# Homebrew
export HOMEBREW_GITHUB_API_TOKEN=beae5c6d64e91d958a839e7ccea368fb494d7fce
export HOMEBREW_NO_AUTO_UPDATE=1
export HOMEBREW_NO_INSTALL_CLEANUP=1
# export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles
# export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles
export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles
# export HOMEBREW_BOTTLE_DOMAIN=http://7xkcej.dl1.z0.glb.clouddn.com
# caskroom
# export HOMEBREW_CASK_OPTS="--caskroom=${APPDIR}/Caskroom"
# export HOMEBREW_CASK_OPTS="--appdir=${APPDIR}/Caskroom --fontdir=${HOME}/Library/Fonts"

# LUNCHY_DIR=$(dirname `gem which lunchy`)/../extras
# if [ -f $LUNCHY_DIR/lunchy-completion.zsh ]; then
    # source $LUNCHY_DIR/lunchy-completion.zsh
# fi

# MS.NET
# export DOT_NET_CORE=/usr/local/share/dotnet
# export PATH=$DOT_NET_CORE/bin:$PATH

# source ~/.config/tmuxinator/completion/tmuxinator.zsh
new-id () {
  if [[ ! $1 =~ '^[0-9]{1,2}$' ]]; then
    print "must be a number"
    return 0
  fi

  NEWID=$(cat /dev/urandom | env LC_ALL=C LC_CTYPE=C tr -dc "a-zA-Z0-9@#$%^&*()_+?><~\`;'" | fold -w $1 | head -n 1)
  # NEWID=$(cat /dev/urandom | tr -dc "a-zA-Z0-9!@#$%^&*()_+?><~\`;'" | fold -w $1 | head -n 1)
  echo $NEWID
}

git_log_month () {
  if [[ -z $1 ]]; then
    gl
    return 0
  fi

  if [[ ! $1 =~ '^[0-9]{1,2}$' ]]; then
    print "must be a number"
    return 0
  fi

  local after=$(date "+%Y-%m-%d" --date="$1 month ago")
  print "after = $after"

  local git_command=gl
  if [[ -n "$2" ]]; then
    git_command=$2
  fi

  if [[ "$1" == "1" ]]; then
    eval "$git_command --after=$after"
    return 0
  fi

  local before=$(date "+%Y-%m-%d" --date="$(((${1}-1))) month ago")

  print "before = $before"

  eval "$git_command --after=$after --before=$before"
}


mkp () {
  mkdir -p $1
  builtin cd $1
}

down_curl () {
  curl -fLo "$1" $2
}

disucode () {

  echo "\u$1"
}

dylib_version () {
  otool -L $1
}


function = () {
  echo "$@" | bc -l
}

function open_command() {
  emulate -L zsh
  setopt shwordsplit

  local open_cmd

  # define the open command
  case "$OSTYPE" in
    darwin*)  open_cmd='open' ;;
    cygwin*)  open_cmd='cygstart' ;;
    linux*)   open_cmd='xdg-open' ;;
    msys*)    open_cmd='start ""' ;;
    *)        echo "Platform $OSTYPE not supported"
              return 1
              ;;
  esac

  # don't use nohup on OSX
  if [[ "$OSTYPE" == darwin* ]]; then
    $open_cmd "$@" &>/dev/null
  else
    nohup $open_cmd "$@" &>/dev/null
  fi
}

function code {
    if [[ $# = 0 ]]
    then
        open_command -a "Visual Studio Code"
    else
        local argPath="$1"
        [[ $1 = /* ]] && argPath="$1" || argPath="$PWD/${1#./}"
        open_command -a "Visual Studio Code" "$argPath"
    fi
}

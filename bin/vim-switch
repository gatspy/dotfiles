#!/usr/bin/env python
# encoding: utf-8

import os
import argparse


class EnvrionmentNotFound(EnvironmentError):
    """docstring for EnvrionmentNotFound"""
    def __init__(self, path):
        super(EnvrionmentNotFound, self).__init__()
        self.path = path


class CommandArgsNotSupport(Exception):
    pass

vim_script = {
    'kvim': 'kvim_conf',
    'wvim': 'wvim_conf'
}
vim_script_alias = {
    'k': 'kvim',
    'kvim': 'kvim',
    's': 'spf13',
    'spf': 'spf13',
    'spf13': 'spf13',
    'w': 'wvim',
    'wvim': 'wvim'
}

vim_cfg_path = ''.join([os.getenv("HOME"), os.sep, ".vim.switch"])
# vim_cfg_path = ''.join([os.path.expanduser("~"), os.sep, ".vim_switch"])
vim_config = {}

def dict_2_dictlist(alias):
    ''' other method '''
    ''' import collections
        d = .... #like above alias
        d1 = collections.defaultdict(list)
        for k, v in d.iteritems():
            d1[v].append(k)
        print d1
    '''
    if not alias:
        print 'alias declared is empty'
        return
    kset = set(alias.values())
    d = {}
    for x in kset:
        d[x] = [k for k, v in alias.iteritems() if v == x]
    return d


def listdict_2_dict(list):
    '''this method like this '''
    '''
        d = [{...},{...},{...}]
        lis = [{"abc":"movies"}, {"abc": "sports"}, {"abc": "music"},
        {"xyz": "music"}, {"pqr":"music"}, {"pqr":"movies"},{"pqr":"sports"},
        {"pqr":"news"}, {"pqr":"sports"}]
    '''
    if not list:
        print 'alias declared is empty'
        return
    kset = set(val for dic in list for val in dic.values())
    d = {}
    for sv in kset:
        d[sv] = [k for dic in list for k, v in dic.iteritems() if v == sv]
    return d


def find_key_from_list(dic, command):
    if not dic:
        return
    s = set(k for k, v in dic.iteritems() if command in v)
    return str(list(s)[0]) if len(s) == 1 else ''


def check_environ_config():
    try:
        # environs = os.environ
        # for vim in vim_script.values():
        #     if vim.upper() not in environs:
        #         raise EnvrionmentNotFound(vim.upper())
        # print vim_config
        if not vim_config:
            raise EnvrionmentNotFound('vim script config')
        for vim in vim_script.values():
            # if not vim_config.has_key(vim.upper()):
            if vim.upper() not in vim_config:
                raise EnvrionmentNotFound(vim.upper())
    except EnvrionmentNotFound, env:
        print 'EnvrionmentNotFound in PATH,%s dont config' % env.path
        return
    return True


def get_vim_script(vimarg):
    try:
        if not vimarg:
            return
        akeys = [x.upper() for x in vim_script_alias.keys()]
        if vimarg.upper() not in akeys:
            raise CommandArgsNotSupport()
    except CommandArgsNotSupport:
        print 'CommandArgsNotSupport,using[k|kvim|w|wvim'
        return
    dlist = dict_2_dictlist(vim_script_alias)
    script_type = find_key_from_list(dlist, vimarg)
    return script_type


def read_vimconfig():
    if os.path.isfile(vim_cfg_path):
        with open(vim_cfg_path) as f:
            for line in f.readlines():
                spart = line.strip().partition(":")
                if not spart[0] or len(spart) != 3:
                    continue
                vim_config[spart[0].upper()] = spart[2]


def get_current_vim():
    if vim_config:
        return vim_config['current'.upper()]


def get_switch_filename(switch, on_off):
    # with open(vim_cfg_path) as f:
    #     lines = [line for line in f.readlines if switch in line]
    if vim_config:
        return vim_config[on_off.upper()].split('|')


def get_switch_config(switch):
    t = [k for k, v in vim_script.iteritems()
         if v.upper() == switch.upper()]
    return vim_config[t[0]]


def switch_on(switch):
    files = get_switch_filename(switch, 'off')
    print 'on--%s' % files
    if not files:
        return
    l = []
    for file in files:
        newfile = ''.join([os.getenv("HOME"), os.sep, file.split('_')[0]])
        oldfile = ''.join([os.getenv("HOME"), os.sep, file])
        l.append(file.split('_')[0])
        if os.path.isfile(oldfile) or os.path.islink(oldfile) or os.path.isdir(oldfile):
            os.rename(oldfile, newfile)
    return '|'.join(l)


def switch_off(switch):
    files = get_switch_filename(switch, 'on')
    print 'off--%s' % files
    if not files:
        files = get_switch_config(switch)
    l = []
    for file in files:
        oldfile = ''.join([os.getenv("HOME"), os.sep, '{0}'.format(file)])
        newfile = ''.join([os.getenv("HOME"), os.sep, '{0}_{1}'.format(file, switch)])
        l.append('{0}_{1}'.format(file, switch))
        # print 'file:%s | oldfile:%s | newfile %s' % (file,oldfile,newfile)
        if os.path.isfile(oldfile) or os.path.islink(oldfile) or os.path.isdir(oldfile):
            os.rename(oldfile, newfile)
    return '|'.join(l)


def writeconfig(filepath):
    if vim_config:
        with open(filepath, 'w') as f:
            for k, v in vim_config.iteritems():
                wl = '{0}:{1}\n'.format(k, v)
                f.write(wl)


def test_write():
    writeconfig('/Users/MAC/.testconf')


def switch_vim(off, on):
    if off:
        off_files = switch_off(off)
    if on:
        on_files = switch_on(on)

    vim_config['off'.upper()] = off_files
    vim_config['on'.upper()] = on_files
    vim_config['current'.upper()] = on


def process(off, on):
    read_vimconfig()
    # config file all in .vim.switch,don't use env variable
    result = check_environ_config()
    if not result:
        return

    # parse command to switch vim script
    switch_off = get_vim_script(off)
    switch_on = get_vim_script(on)
    current = get_current_vim()
    if not current:
        print 'current vim script dont defined in %s' % vim_cfg_path
        return
    if switch_off and switch_off.upper() != current.upper():
        print 'switch off - %s not equal current %s' % (switch_off, current)
        return
    if switch_on and switch_on.upper() == current.upper():
        print 'switch on - %s equal current' % switch_on
        return
    switch_vim(switch_off, switch_on)
    # print vim_config
    writeconfig(vim_cfg_path)


def parse_argument():
    parse = argparse.ArgumentParser(description='Vim script switch')
    parse.add_argument('-of', '--off', action='store', dest='off', required=True)
    parse.add_argument('-on', '--on', action='store', dest='on', required=True)
    parse.add_argument('--get', action='store', dest='on', required=False)
    given_args = parse.parse_args()
    off = given_args.off
    on = given_args.on if given_args.on is not None else ''
    return (off, on)

if __name__ == "__main__":
    args = parse_argument()
    process(*args)
